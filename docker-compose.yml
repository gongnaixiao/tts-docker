version: '3.7'

services:
  tts-mysql:
    build:
      context: ./db
    environment:
      MYSQL_ROOT_PASSWORD: root
    restart: "no"
    container_name: tts-mysql
    image: tts-mysql
    security_opt:
      - seccomp:unconfined
    ports:
      - 3306:3306
    networks:
      nsrr:
        aliases:
          - tts-mysql
  tts-redis:
    image: redis:6.0
    ports:
      - 6379:6379
    restart: "no"
    container_name: tts-redis
    hostname: tts-redis
    networks:
      nsrr:
        aliases:
          - tts-redis
  tts-register:
    image: nacos/nacos-server:v2.2.0
    container_name: tts-register
    hostname: tts-register
    env_file:
      - tts-register/env/nacos-standlone-mysql.env
    volumes:
      - ./tts-register/standalone-logs/:/home/nacos/logs
      - ./tts-register/init.d/custom.properties:/home/nacos/init.d/custom.properties
    restart: "no"
    ports:
      - 8848:8848
      - 9848:9848
    networks:
      nsrr:
        aliases:
          - tts-register
  tts-seata:
    image: seataio/seata-server:1.6.1
    hostname: seata-server
    container_name: tts-seata
    ports:
      - "8091:8091"
      - "7091:7091"
    environment:
      - SEATA_PORT=8091
      - STORE_MODE=file
    restart: "no"
    networks:
      nsrr:
        aliases:
          - tts-seata
  tts-zk:
    image: wurstmeister/zookeeper
    container_name: tts-zk
    hostname: tts-zk
    ports:
      - "2181:2181"
    restart: "no"
    networks:
      nsrr:
        aliases:
          - tts-zk
  tts-kafka:
    image: wurstmeister/kafka:latest
    container_name: tts-kafka
    hostname: tts-kafka
    ports:
      - "9092:9092" 
    environment:
      KAFKA_BROKER_ID: 0
      DOCKER_API_VERSION: 1.22
      KAFKA_ADVERTISED_HOST_NAME: tts-kafka
      KAFKA_ZOOKEEPER_CONNECT: tts-zk:2181
    restart: "no"
    networks:
      nsrr:
        aliases:
          - tts-kafka
  tts-job:
    image: xuxueli/xxl-job-admin:2.3.0
    container_name: tts-job
    hostname: tts-job
    restart: "no"
    ports: 
      - "7397:7397"
    volumes:
    - ./tts-job/xxl-job:/data/applogs 
    environment:
      PARAMS: " --server.port=7397 --spring.datasource.url=jdbc:mysql://tts-mysql:3306/xxl_job?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2B8&allowPublicKeyRetrieval=true --spring.datasource.username=root --spring.datasource.password=root --xxl.job.accessToken=xdsl3ewi3al1oehxmo68pqxer"
    networks:
      nsrr:
        aliases:
          - tts-job
  tts-postgres:
    image: postgres:12.3
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "root" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: no
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=password
      - APP_DB_USER=docker
      - APP_DB_PASS=docker
      - APP_DB_NAME=docker
    volumes:
      - ./postgres-db:/docker-entrypoint-initdb.d/
    ports:
      - 5432:5432
# tts-es:
#   image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
#   ports:
#     - 9200:9200
#     - 9300:9300
#   environment:
#     - discovery.type=single-node
#   restart: always
#   container_name: tts-es
#   hostname: tts-es
# tts-kibana:
#   image:
#   ports:
#     - 5601:5601
#   environment:
#   restart: always
#   container_name: tts-kibana
#   hostname: tts-kibana
#   depends_on:
#     - tts-es
# tts-sentinel:
#   image: bladex/sentinel-dashboard:1.7.0
#   ports:
#     - 8858:8858
#   restart: always
#   container_name: tts-sentinel
#   hostname: tts-sentinel
#   environment:
#     JAVA_OPTS: "-Xmx256m -Xms256m"
#   volumes:
#     - ./tts-sentinel/logs:/opt/logs
#   networks:
#     nsrr:
#       aliases:
#         - tts-sentinel
# tts-zipkin:
#   image: openzipkin/zipkin
#   ports:
#     - 9411:9411
#   restart: always
#   container_name: tts-zipkin
#   hostname: tts-zipkin
#   networks:
#     nsrr:
#       aliases:
#         - tts-zipkin
# tts-rmqnamesrv:
#   image: foxiswho/rocketmq:server
#   container_name: tts-rmqnamesrv
#   environment:
#     JAVA_OPT_EXT: "-server -Xms128m -Xmx128m -Xmn128m"
#   ports:
#     - 9876:9876
#   restart: always
#   volumes:
#     - ./tts-rmq/logs:/opt/logs
#     - ./tts-rmq/store:/opt/rmqstore
#   networks:
#     nsrr:
#       aliases:
#         - tts-rmqnamesrv
# tts-rmqbroker:
#   image: foxiswho/rocketmq:broker
#   container_name: tts-rmqbroker
#   ports:
#     - 10909:10909
#     - 10911:10911
#   restart: always
#   volumes:
#     - ./tts-rmq/logs:/opt/logs
#     - ./tts-rmq/store:/opt/rmqstore
#     - ./tts-rmq/brokerconf/broker.conf:/etc/rocketmq/broker.conf
#   environment:
#     NAMESRV_ADDR: "tts-rmqnamesrv:9876"
#     JAVA_OPTS: " -Duser.home=/opt"
#     JAVA_OPT_EXT: "-server -Xms128m -Xmx128m -Xmn128m"
#   command: mqbroker -c /etc/rocketmq/broker.conf
#   depends_on:
#     - tts-rmqnamesrv
#   networks:
#     nsrr:
#       aliases:
#         - tts-rmqbroker
# tts-rmqconsole:
#   image: styletang/rocketmq-console-ng
#   container_name: tts-rmqconsole
#   ports:
#     - 8180:8080
#   restart: always
#   environment:
#     JAVA_OPTS: "-Drocketmq.namesrv.addr=tts-rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false "
#     JAVA_OPT_EXT: "-Xms128m -Xmx128m -Xmn128m"
#   depends_on:
#     - tts-rmqnamesrv
#   networks:
#     nsrr:
#       aliases:
#         - tts-rmqconsole
networks:
  nsrr:
    name: nsrr
    driver: bridge